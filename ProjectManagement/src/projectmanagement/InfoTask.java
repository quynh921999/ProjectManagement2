/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projectmanagement;

import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author quynh
 */
public class InfoTask extends javax.swing.JFrame {

    /**
     * Creates new form InfoTask
     */
    public InfoTask() {
        initComponents();
        showInfoTask();
        setItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        selectStatus = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nameDevAssign = new javax.swing.JTextField();
        assign = new javax.swing.JButton();
        nameTestAssign = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Name Project", "Developer", "Tester", "startDate", "endDate", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel1.setText("Change status:");

        selectStatus.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ProjectMangement/Image/update icon.png"))); // NOI18N
        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 51, 153));
        jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Assign to :");

        nameDevAssign.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        assign.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        assign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ProjectMangement/Image/attach.png"))); // NOI18N
        assign.setText("Assigned");
        assign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignActionPerformed(evt);
            }
        });

        nameTestAssign.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(selectStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameDevAssign, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(nameTestAssign))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(jButton2))
                    .addComponent(assign))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(selectStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(assign, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(nameDevAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameTestAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    public void setItem(){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String oldStatus = (String) model.getValueAt(0, 6);
        System.out.println(oldStatus);
        if(Emp.empWorkAs.equals("Developer")){
            if(oldStatus.equals("Assigned") || oldStatus.equals("Reject")){
                selectStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Started"}));
            } else if(oldStatus.equals("Started")){
                selectStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Completed"}));
            } 
        }
        if(Emp.empWorkAs.equals("Tester")){
            if(oldStatus.equals("Completed")){
                selectStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Done", "Reject"}));
            }
        }
        if(Emp.empWorkAs.equals("Manager")){
            if(oldStatus.equals("Done")){
                selectStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Closed"}));
            }
        }
    }
    public void updateStatus(){
        String nameTask = (String) ListTask.row.get(0);
        String getStatus = selectStatus.getSelectedItem().toString();
        if(!getStatus.equals("Closed")){
            String sql = "update task set status = '" + getStatus +"' where name = '" +nameTask +"'" ;
            try {
                login.dbc.st =login.dbc.conn.createStatement();
                login.dbc.ps.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Update status in task successfully!");
            } catch (SQLException ex) {
                Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            Date date = new Date();
            String end = dateFormat.format(date);
            String sql = "update task set status = '" + getStatus +"' , endDate = '" + end +"' where name = '" +nameTask +"'" ;
            try {
                login.dbc.st =login.dbc.conn.createStatement();
                login.dbc.ps.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Update status in task successfully!");
            } catch (SQLException ex) {
                Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
    public String getStatusTask(){
        String nameTask = (String) ListTask.row.get(0);
        String sql = "select * from status where nameTask = ?";
        try {
            login.dbc.ps = login.dbc.conn.prepareStatement(sql);
            login.dbc.ps.setString(1, nameTask);
            login.dbc.rs = login.dbc.ps.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
        }
        String oldStatus = null;
        try {
            if(login.dbc.rs.next()){
                oldStatus = login.dbc.rs.getString("status_Task");
            }
            } catch (SQLException ex) {
            Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
        }
        return oldStatus;
    }
    public void addTaskActionLog(){
        String nameTask = (String) ListTask.row.get(0);
        String result = getStatusTask()+ "," + selectStatus.getSelectedItem().toString();
        String sql = "update status set status_Task = '" + result +"' where nameTask = '" + nameTask + "'";
        try {
            login.dbc.st = login.dbc.conn.createStatement();
            login.dbc.ps.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, "Update status in status table successfully!");
        } catch (SQLException ex) {
            Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        Object[] rows = new Object[7];
        for(int i = 0; i < ListTask.row.size()-1; i++){
            rows[i] = ListTask.row.get(i);
        }
        rows[6] = selectStatus.getSelectedItem().toString();
        model.addRow(rows);
        updateStatus(); //table task
        addTaskActionLog();//table status
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ListTask listTask = new ListTask();
        listTask.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    public int getIDperson(String name){
        int id = 0;
        String sql = "select * from login where username = ?";
            try {
                login.dbc.ps = login.dbc.conn.prepareStatement(sql);
                login.dbc.ps.setString(1, name);
                login.dbc.rs = login.dbc.ps.executeQuery();
            } catch (SQLException ex) {
                Logger.getLogger(ex.getMessage());
            } 
        try {
            if(login.dbc.rs.next())
                id = login.dbc.rs.getInt("ID");
        } catch (SQLException ex) {
            Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
    public String get_oldIDdev(){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String nameTask = (String) model.getValueAt(0, 0);
        String oldID = null;
        String sql = "select * from task where name = ?";
            try {
                login.dbc.ps = login.dbc.conn.prepareStatement(sql);
                login.dbc.ps.setString(1,nameTask );
                login.dbc.rs = login.dbc.ps.executeQuery();
            } catch (SQLException ex) {
                Logger.getLogger(ex.getMessage());
            } 
        try {
            if(login.dbc.rs.next())
                oldID = login.dbc.rs.getString("developerIDs");
        } catch (SQLException ex) {
            Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
        }
        return oldID;
    }
    public String get_oldIDtest(){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String nameTask = (String) model.getValueAt(0, 0);
        String oldID = null;
        String sql = "select * from task where name = ?";
            try {
                login.dbc.ps = login.dbc.conn.prepareStatement(sql);
                login.dbc.ps.setString(1,nameTask );
                login.dbc.rs = login.dbc.ps.executeQuery();
            } catch (SQLException ex) {
                Logger.getLogger(ex.getMessage());
            } 
        try {
            if(login.dbc.rs.next())
                oldID = login.dbc.rs.getString("testerIDs");
        } catch (SQLException ex) {
            Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
        }
        return oldID;
    }
    // add new id dev in task table
    public void updateTaskAssign(){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String nameTask = (String) model.getValueAt(0, 0);
        //System.out.println(nameTask);
        String oldIdDev = get_oldIDdev() +"," + String.valueOf(getIDperson(nameDevAssign.getText()));
        String oldIdTest = get_oldIDtest() + "," + String.valueOf(getIDperson(nameTestAssign.getText()));
        String sql = "update task set developerIDs = '" + oldIdDev +"' , testerIDs = '" + oldIdTest +"'  where name = '" + nameTask + "'";
        try {
            login.dbc.st = login.dbc.conn.createStatement();
            login.dbc.ps.executeUpdate(sql);
            JOptionPane.showMessageDialog(null, "Update devID in task table successfully!");
        } catch (SQLException ex) {
            Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public int getIDproject(){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String nameTask = (String) model.getValueAt(0, 0);
        String sql = "select * from task where name = ?";
        try {
            login.dbc.ps = login.dbc.conn.prepareStatement(sql);
            login.dbc.ps.setString(1, nameTask);
            login.dbc.rs = login.dbc.ps.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(ex.getMessage());
        } 
        int id = 0;
        try {
            if(login.dbc.rs.next())
                id = login.dbc.rs.getInt("projectID");
        } catch (SQLException ex) {
            Logger.getLogger(ListTask.class.getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }
    public String getIDemployee(){
        String sql = "select * from project where ID = ?";
        int idProj = getIDproject();
        try {
            login.dbc.ps = login.dbc.conn.prepareStatement(sql);
            login.dbc.ps.setInt(1, idProj);
            login.dbc.rs = login.dbc.ps.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(ex.getMessage());
        } 
        String idEmp = null;
        try {
            if(login.dbc.rs.next())
                idEmp = login.dbc.rs.getString("employeeIDs");
        } catch (SQLException ex) {
            Logger.getLogger(ListTask.class.getName()).log(Level.SEVERE, null, ex);
        }
        return idEmp;
    }
    public void updateProject(){
        String empID = getIDemployee();
        String[] tempID = empID.split(",");
        ArrayList<Integer> temp = new ArrayList<>();
        for(int i = 0; i < tempID.length; i++)
            temp.add(Integer.parseInt(tempID[i]));
        if(!temp.contains(getIDperson(nameDevAssign.getText())) && !temp.contains(getIDperson(nameTestAssign.getText()))){
            empID = empID + "," + String.valueOf(getIDperson(nameDevAssign.getText())) + "," + String.valueOf(getIDperson(nameTestAssign.getText())); 
            String sql = "update project set employeeIDs = '" + empID +"' where ID = '" + getIDproject() + "'";
            try {
                login.dbc.st = login.dbc.conn.createStatement();
                login.dbc.ps.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Update empIDs in project table successfully!");
            } catch (SQLException ex) {
                Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if(!temp.contains(getIDperson(nameDevAssign.getText())) && temp.contains(getIDperson(nameTestAssign.getText()))){
            empID = empID + "," + String.valueOf(getIDperson(nameDevAssign.getText())); 
            String sql = "update project set employeeIDs = '" + empID +"' where ID = '" + getIDproject() + "'";
            try {
                login.dbc.st = login.dbc.conn.createStatement();
                login.dbc.ps.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Update empIDs in project table successfully!");
            } catch (SQLException ex) {
                Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if(temp.contains(getIDperson(nameDevAssign.getText())) && !temp.contains(getIDperson(nameTestAssign.getText()))){
            empID = empID + "," + String.valueOf(getIDperson(nameTestAssign.getText())); 
            String sql = "update project set employeeIDs = '" + empID +"' where ID = '" + getIDproject() + "'";
            try {
                login.dbc.st = login.dbc.conn.createStatement();
                login.dbc.ps.executeUpdate(sql);
                JOptionPane.showMessageDialog(null, "Update empIDs in project table successfully!");
            } catch (SQLException ex) {
                Logger.getLogger(InfoTask.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    private void assignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        String status = (String) model.getValueAt(0, 6);
        if(!status.equals("Closed")) {
            if(Emp.empDivision.equals("Manager")){
            updateTaskAssign();
            updateProject();
            } else {
                JOptionPane.showMessageDialog(null, "Only Manager can assigned");
            }
        } else {
            JOptionPane.showMessageDialog(null, "This Task closed! Can not assign!");
        }
        
    }//GEN-LAST:event_assignActionPerformed

    /**
     * @param args the command line arguments
     */
    public void showInfoTask(){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Object[] rows = new Object[7];
        for(int i = 0; i < ListTask.row.size(); i++){
            rows[i] = ListTask.row.get(i);
        }
        model.addRow(rows);
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InfoTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InfoTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InfoTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InfoTask.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InfoTask().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assign;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nameDevAssign;
    private javax.swing.JTextField nameTestAssign;
    private javax.swing.JComboBox<String> selectStatus;
    // End of variables declaration//GEN-END:variables
}
